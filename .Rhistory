mpg <- get_mpg(car, speed, data$cars)
return(get_cost(distance,mpg,price))
return(get_cost(distance,mpg,price))
return(get_cost(distance,mpg,price))
get_distance <- function(cities,dists) {
distance <- 0
currentCity = cities[1]
for (i in 2:(length(cities)-1)) {
distance <- distance + dists[currentCity,cities[i]]
currentCity <- cities[i]
}
return(distance)
}
get_mpg <-function(car, speed, cars) {
return(cars[cars$car == car & cars$speed == speed,'mpg'])
}
get_cost <- function(distance, consumption, price) {
return((price/consumption)*distance)
}
tripcost <- function(cities, car, speed, price, data) {
distance <- get_distance(cities,data$dists)
mpg <- get_mpg(car, speed, data$cars)
return(get_cost(distance,mpg,price))
}
trip_cost(cities = c("Berkeley", "SanFrancisco", "Oakland"), car = 'mazda3',
speed = 'city', price = 3.07, data = dat)
)
trip_cost(cities = c("Berkeley", "SanFrancisco", "Oakland"), car = 'mazda3',speed = 'city', price = 3.07, data = dat)
dat <- list(cars = cars, dists = dists)
trip_cost(cities = c("Berkeley", "SanFrancisco", "Oakland"), car = 'mazda3',speed = 'city', price = 3.07, data = dat)
get_distance <- function(cities,dists) {
distance <- 0
currentCity = cities[1]
for (i in 2:(length(cities)-1)) {
distance <- distance + dists[currentCity,cities[i]]
currentCity <- cities[i]
}
return(distance)
}
get_mpg <-function(car, speed, cars) {
return(cars[cars$car == car & cars$speed == speed,'mpg'])
}
get_cost <- function(distance, consumption, price) {
return((price/consumption)*distance)
}
trip_cost <- function(cities, car, speed, price, data) {
distance <- get_distance(cities,data$dists)
mpg <- get_mpg(car, speed, data$cars)
return(get_cost(distance,mpg,price))
}
trip_cost(cities = c("Berkeley", "SanFrancisco", "Oakland"), car = 'mazda3',speed = 'city', price = 3.07, data = dat)
get_distance <- function(cities,dists) {
distance <- 0
currentCity = cities[1]
for (i in 2:(length(cities)-1)) {
distance <- distance + as.integer(dists[currentCity,cities[i]])
currentCity <- cities[i]
}
return(distance)
}
trip_cost(cities = c("Berkeley", "SanFrancisco", "Oakland"), car = 'mazda3',speed = 'city', price = 3.07, data = dat)
dists
trip_cost(cities = c("Berkeley", "SanFrancisco", "Oakland","PaloAlto","SanMateo"), car = 'mazda3',speed = 'city', price = 3.07, data = dat)
get_distance <- function(cities,dists) {
distance <- 0
currentCity = cities[1]
if (length(cities) > 1) {
for (i in 2:(length(cities)-1)) {
distance <- distance + as.integer(dists[currentCity,cities[i]])
currentCity <- cities[i]
}
}
return(distance)
}
get_mpg <-function(car, speed, cars) {
return(cars[cars$car == car & cars$speed == speed,'mpg'])
}
get_cost <- function(distance, consumption, price) {
return((price/consumption)*distance)
}
trip_cost <- function(cities, car, speed, price, data) {
distance <- get_distance(cities,data$dists)
mpg <- get_mpg(car, speed, data$cars)
return(get_cost(distance,mpg,price))
}
trip_cost(cities = c("Berkeley", "SanFrancisco", "Oakland","PaloAlto","SanMateo"), car = 'mazda3',speed = 'city', price = 3.07, data = dat)
random_trip <- function(size = 2) {
if (size > 7) {
size <- 2
}
indices <- sample(1:7,size,replace = TRUE)
places <- rownames(dists)
return(places[indices])
}
random_trip(2)
random_trip <- function(size = 2) {
if (size > 7) {
size <- 2
}
indices <- sample(1:7,size,replace = FALSE)
places <- rownames(dists)
return(places[indices])
}
random_trip(5)
random_trip(7)
trip_cost(cities = random_trip(3), car = 'mazda3', speed = 'city', price = 3.07, data = dat)
e) df(order(df$height), c(name, height))
What of the following options does not apply to histograms:
a) adjacent bars (no gaps) b) area of bars indicate proportions c) bins of equal length d) bars can be reordered
What type of plot is based on the ﬁve-number summary:
a) bar chart b) box plot c) histogram d) scatterplot
What of the following options does NOT apply to the function plot()
a) accepts any type of vector b) is a generic function c) works only for 1-D and 2-D objects d) is designed to display scatterplots and boxplots
Consider the following code:
x <- 5
foo <- function() { y <- 10 c(x = x, y = y) }
x <-5
foo <- function() {}
foo <-function() {y <- 10; c(x,y);}
foor()
foo()
vec[1] = vec[1]+1
vec <- c(0,1,4,5,-1)
for (k in seq_along(vec)) {
vec[k] = vec[k] +1
}
vec
vec <- numeric(0)
vec <- numeric(5)
vec <- Numeric()
vec <- numeric()
vec[1] <- 1
vec[2] <-2
vec[3] <- 3
as.integer(TRUE)
TRUE + 5
gas_prices <- read_csv("https://github.com/gastonstat/stat133/tree/master/datasets/gas_prices_2015.csv")
gas_prices <- read_csv(url("https://github.com/gastonstat/stat133/tree/master/datasets/gas_prices_2015.csv"))
gas_prices <- read_csv(url("https://raw.githubusercontent.com/gastonstat/stat133/master/datasets/gas_prices_2015.csv"))
gas_prices
gas_price_table <- read_csv(url("https://raw.githubusercontent.com/gastonstat/stat133/master/datasets/gas_prices_2015.csv"))
gas_prices <- numeric(0)
gas_prices[1]
ncol(gas_price_table)
gas_price_table[1]
cars[cars$car == "mazda3"]
cars[,cars$car == "mazda3"]
gas_price_table <- read_csv(url("https://raw.githubusercontent.com/gastonstat/stat133/master/datasets/gas_prices_2015.csv"))
gas_prices <- numeric(0)
for (i in seq(3,ncol(gas_prices_table),2)) {
weekly_gas_price <- gas_price_table[i,]
weekly_gas_price <- weekly_gas_price[!is.na(weekly_gas_price)]
print(weekly_gas_price)
}
gas_price_table <- read_csv(url("https://raw.githubusercontent.com/gastonstat/stat133/master/datasets/gas_prices_2015.csv"))
gas_prices <- numeric(0)
for (i in seq(3,ncol(gas_prices_table),2)) {
weekly_gas_price <- gas_price_table[i,]
weekly_gas_price <- weekly_gas_price[!is.na(weekly_gas_price)]
print(weekly_gas_price)
}
for (i in seq(3,ncol(gas_prices_table),2)) {
weekly_gas_price <- gas_price_table[i,]
weekly_gas_price <- weekly_gas_price[!is.na(weekly_gas_price)]
print(weekly_gas_price)
}
for (i in seq(3,ncol(gas_price_table),2)) {
weekly_gas_price <- gas_price_table[i,]
weekly_gas_price <- weekly_gas_price[!is.na(weekly_gas_price)]
print(weekly_gas_price)
}
gas_price_table
gas_price_table[1,]
gas_price_table[,1]
for (i in seq(3,ncol(gas_price_table),2)) {
weekly_gas_price <- gas_price_table[,i]
weekly_gas_price <- weekly_gas_price[!is.na(weekly_gas_price)]
print(weekly_gas_price)
}
gas_price_table <- read_csv(url("https://raw.githubusercontent.com/gastonstat/stat133/master/datasets/gas_prices_2015.csv"))
gas_prices <- numeric(0)
for (i in seq(3,ncol(gas_price_table),2)) {
weekly_gas_price <- gas_price_table[,i]
weekly_gas_price <- weekly_gas_price[!is.na(weekly_gas_price)]
gas_prices <- c(gas_prices,weekly_gas_price)
}
gas_prices
len(gas_prices)
length(gas_prices)
trip_cost <- function(cities, car, speed) {
fuel_costs <- numeric(length(gas_prices))
for (i in 1:length(gas_prices)) {
fuel_costs[i] = trip_cost(cities = cities, car = car, speed = speed, cost = gas_prices[i], data = dat)
}
return(fuel_costs)
}
trip_cost(cities = c("Berkeley","SanFrancisco"),car = "mazda3", speed = "city")
get_distance <- function(cities,dists) {
distance <- 0
currentCity = cities[1]
if (length(cities) > 1) {
for (i in 2:(length(cities)-1)) {
distance <- distance + as.integer(dists[currentCity,cities[i]])
currentCity <- cities[i]
}
}
return(distance)
}
get_mpg <-function(car, speed, cars) {
return(cars[cars$car == car & cars$speed == speed,'mpg'])
}
get_cost <- function(distance, consumption, price) {
return((price/consumption)*distance)
}
trip_cost <- function(cities, car, speed, price, data) {
distance <- get_distance(cities,data$dists)
mpg <- get_mpg(car, speed, data$cars)
return(get_cost(distance,mpg,price))
}
trip_cost(cities = c("Berkeley", "SanFrancisco", "Oakland","PaloAlto","SanMateo"), car = 'mazda3',speed = 'city', price = 3.07, data = dat)
gas_price_table <- read_csv(url("https://raw.githubusercontent.com/gastonstat/stat133/master/datasets/gas_prices_2015.csv"))
gas_prices <- numeric(0)
for (i in seq(3,ncol(gas_price_table),2)) {
weekly_gas_price <- gas_price_table[,i]
weekly_gas_price <- weekly_gas_price[!is.na(weekly_gas_price)]
gas_prices <- c(gas_prices,weekly_gas_price)
}
gas_prices
fuel_costs <- numeric(length(gas_prices))
for (i in 1:length(gas_prices)) {
fuel_costs[i] <- trip_cost(cities = c("Berkeley","SanFrancisco"), car = "mazda3", speed = "city", cost = gas_prices[i], data = dat)
}
fuel_costs
fuel_costs <- numeric(length(gas_prices))
for (i in 1:length(gas_prices)) {
fuel_costs[i] <- trip_cost(cities = c("Berkeley","SanFrancisco"), car = "mazda3", speed = "city", price = gas_prices[i], data = dat)
}
fuel_costs
weekly_costs <- numeric(length(gas_prices))
for (i in 1:length(gas_prices)) {
weekly_costs[i] <- trip_cost(cities = c("Berkeley","SanFrancisco"), car = "mazda3", speed = "city", price = gas_prices[i], data = dat)
}
weekly_costs
plot(1:39,weekly_costs)
plot_data <- list(week = 1:39, costs = weekly_costs)
plot_data$week
pdata <- list(week = 1:39, costs = weekly_costs)
pdata$costs
library(ggplot2)
ggplot(data = mtcars, aes(x = week, y = hp)) + geom_point()
ggplot(data = mtcars, aes(x = week, y = hp)) + geom_point(size = 3)
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3)
pdata <- data.frame(week = 1:39, costs = weekly_costs)
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3)
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3) + geom_line()
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3) + geom_line(size = 2)
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = "green") + geom_line(size = 2)
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = "green") + geom_line(size = 1,color = "green")
+ ggtitle("Weekly Gas Costs from Berkeley to San Francisco of mazda3 in city speed")
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = "green") + geom_line(size = 1,color = "green") + ggtitle("Weekly Gas Costs from Berkeley to San Francisco of mazda3 in city speed")
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = "green") + geom_line(size = 1,color = "green") + ggtitle("Weekly Gas Costs: Berkeley to San Francisco, mazda3, city speed")
trip_cost(cities = c('Berkeley','Hayward'), car = 'mazda3',speed ='city',price = 3.07,data = dat)
dat
get_distance(c('Berkeley','Hayward'),dists =dists)
dists['Berkeley','Hayward']
2:2
get_distance <- function(cities,dists) {
distance <- 0
currentCity = cities[1]
if (length(cities) > 1) {
for (i in 2:(length(cities))) {
distance <- distance + as.numeric(dists[currentCity,cities[i]])
currentCity <- cities[i]
}
}
return(distance)
}
get_distance(c('Berkeley','Hayward'),dists =dists)
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = "green") + geom_line(size = 1,color = "green") + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + xlab("weeks (Jan-Sep 2015") + ylab("cost of fuel (dollars)")
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = "green") + geom_line(size = 1,color = "green") + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + xlab("weeks (Jan-Sep 2015") + ylab("cost of fuel (dollars)") + coord_cartesian(xlim = c(0,3))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = "green") + geom_line(size = 1,color = "green") + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + xlab("weeks (Jan-Sep 2015") + ylab("cost of fuel (dollars)") + coord_cartesian(ylim = c(0,3))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = "green") + geom_line(size = 1,color = "green") + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + xlab("weeks (Jan-Sep 2015") + ylab("cost of fuel (dollars)") + coord_cartesian(ylim = c(0,2)) + theme_bw()
source('~/.active-rstudio-document', echo=TRUE)
gas_prices
gas_price_table
nrows(gas_price_tabls)
gas_prices <- numeric(0)
for (i in nrow(gas_price_table)) {
for (j in seq(3,ncol(gas_price_table),2)) {
gas_price_val <- gas_price_table[i,j]
if (!is.na(gas_price_val)) {
gas_prices <- c(gas_prices,c(gas_price_val))
}
}
}
gas_prices
gas_prices <- numeric(0)
for (i in nrow(gas_price_table)) {
for (j in seq(3,ncol(gas_price_table),2)) {
gas_price_val <- gas_price_table[i,j]
if (!is.na(gas_price_val)) {
gas_prices <- c(gas_prices,c(gas_price_val))
}
}
}
for (i in 1:nrow(gas_price_table)) {
for (j in seq(3,ncol(gas_price_table),2)) {
gas_price_val <- gas_price_table[i,j]
if (!is.na(gas_price_val)) {
gas_prices <- c(gas_prices,c(gas_price_val))
}
}
}
gas_prices
gas_price_table
gas_prices <- numeric(0)
for (i in 1:9) {
for (j in seq(3,ncol(gas_price_table),2)) {
gas_price_val <- gas_price_table[i,j]
if (!is.na(gas_price_val)) {
gas_prices <- c(gas_prices,c(gas_price_val))
}
}
}
gas_prices
gas_prices <- numeric(0)
for (i in 1:nrow(gas_price_table)) {
for (j in seq(3,ncol(gas_price_table),2)) {
gas_price_val <- gas_price_table[i,j]
if (!is.na(gas_price_val)) {
gas_prices <- c(gas_prices,c(gas_price_val))
}
}
}
gas_prices
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = "green") + geom_line(size = 1,color = "green") + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)") + coord_cartesian(ylim = c(0,2)) + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(10, 40), breaks = seq(0,40))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb(100,200,50)) + geom_line(size = 1,color = rgb(100,200,50)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)") + coord_cartesian(ylim = c(0,2)) + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40))
100/255
200/255
50/255
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196))) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)") + coord_cartesian(ylim = c(0,2)) + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)") + coord_cartesian(ylim = c(0,2)) + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)") + coord_cartesian(ylim = c(0,2)) + theme_minimal() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)") + coord_cartesian(ylim = c(0,2)) + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)")  + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40)) + coord_fixed(ratio = 10/4,ylim = c(0,2))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)")  + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40)) + coord_fixed(ratio = 10/6,ylim = c(0,2))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)")  + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40)) + coord_fixed(ratio = 4/3,ylim = c(0,2))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)")  + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40)) + coord_fixed(ratio = 10,ylim = c(0,2))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)")  + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40)) + coord_fixed(ratio = 20,ylim = c(0,2))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)")  + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40)) + coord_fixed(ratio = 30,ylim = c(0,2))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)")  + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40)) + coord_fixed(ratio = 7,ylim = c(0,2))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)")  + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40)) + coord_fixed(ratio = 6,ylim = c(0,2))
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 3,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)")  + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40)) + coord_fixed(ratio = 8,ylim = c(0,2))
trip_cost(cities = c("Berkeley","Hayward"), car = "mazda3", speed = 'city',price = 3.07,dat)
ggplot(data = pdata, aes(x = week, y = costs)) + geom_point(size = 2,color = rgb( 0.39, 0.78,0.196)) + geom_line(size = 1,color = rgb( 0.39, 0.78,0.196)) + ggtitle("Weekly Costs: Berkeley to San Francisco, mazda3, city speed") + ylab("cost of fuel (dollars)")  + theme_bw() +scale_x_continuous(name = "weeks(Jan-Sept 2015)", limits = c(0, 40), breaks = seq(0,40)) + coord_fixed(ratio = 8,ylim = c(0,2))
library(readr)
getwd()
setwd("Desktop/Data")
getwd
getwd()
type_reference <- read_csv("types.csv")
pokemon_stats <- read_csv("pokemon_stats.csv")
pokemon_types <- read_csv("pokemon_types.csv")
pokemon <- read_csv("pokemon.csv")
stat_names <- read_csv("stat_names.csv")
moves <- read_csv("moves.csv")
```
moves
head(moves)
type_reference
head(pokemon_types)
get_first <- function(lst) {
return(lst[1])
}
pokemon_first_types <- aggregate(pokemon_types[, c('type_id')], list(pokemon_types$pokemon_id), get_first)
head(pokemon_first_types)
head(pokemon_types)
type_reference <- read_csv("types.csv")
type_reference
type_reference[1,1]
get_type <- function(id) {
return(type_reference[type_reference$id] == id,][1][2])
}
get_type <- function(id) {
return(type_reference[type_reference$id == id,]$identifier[1])
}
get_type(1)
get_type(2)
get_type(12)
e
pokemon_first_types.names = c('pokemon_id', 'type_id')
head(pokemon_first_types)
pokemon_first_types.names = c('pokemon_id', 'type_id')
head(pokemon_first_types)
names(pokemon_first_types) = c('pokemon_id', 'type_id')
head(pokemon_first_types)
head(pokemon)
moves
head(moves)
pokemon_first_types$type = get_type(pokemon_first_types$type_id)
pokemon_first_types$type = sapply(pokemon_first_types$type_id, get_type)
head(pokemon_first_types)
sample(pokemon_first_types)
sample(pokemon_first_types,5)
type_count <- aggregate(pokemon_first_types[,c('pokemon_id')], list(pokemon_first_types$type), length)
type_count
type_count2 <- group_by(pokemon_types, pokemon_id) %>% summarise(total = get_first(value))
install.packages("dplyr")
library(dplyr)
library(dplyr)
type_count2 <- group_by(pokemon_types, pokemon_id) %>% summarise(total = get_first(value))
type_count2 <- group_by(pokemon_types, pokemon_id) %>% summarise(total = get_first(type_id))
head(type_count2)
type_count2 <- group_by(pokemon_types, pokemon_id) %>% summarise(type_id = get_first(type_id)) %>% mutate(type = get_type(type_id)) %>% group_by(type) %>% summarise(count = length(pokemon_id))
head(type_count2)
type_count2 <- group_by(pokemon_types, pokemon_id) %>% summarise(type_id = get_first(type_id)) %>% mutate(type = get_type(type_id))
type_count2 <- group_by(pokemon_types, pokemon_id) %>% summarise(type_id = get_first(type_id)) %>% mutate(type = sapply(type_id, get_type)) %>% group_by(type)
head(type_count2)
type_count2 <- group_by(pokemon_types, pokemon_id) %>% summarise(type_id = get_first(type_id)) %>% mutate(type = sapply(type_id, get_type)) %>% group_by(type) %>% summarise(count = length(pokemon_id))
type_count2
type_counts <- group_by(pokemon_types, pokemon_id) %>% summarise(type_id = get_first(type_id)) %>% mutate(type = sapply(type_id, get_type)) %>% group_by(type) %>% summarise(count = length(pokemon_id)) %>% filter(type %in% types)
types <-  c('water', 'fire', 'flying', 'ground', 'poison', 'dragon', 'dark', 'ice', 'electric', 'rock' )
type_counts <- group_by(pokemon_types, pokemon_id) %>% summarise(type_id = get_first(type_id)) %>% mutate(type = sapply(type_id, get_type)) %>% group_by(type) %>% summarise(count = length(pokemon_id)) %>% filter(type %in% types)
type_counts
pokemon_id_types <- group_by(pokemon_types, pokemon_id) %>% summarise(type_id = get_first(type_id)) %>% mutate(type = sapply(type_id, get_type))
head(pokemon_id_types)
pokemon_id_types <- group_by(pokemon_types, pokemon_id) %>% summarise(type_id = get_first(type_id)) %>% mutate(type = sapply(type_id, get_type)) %>% summarise(pokemon_id, type)
pokemon_id_types <- group_by(pokemon_types, pokemon_id) %>% summarise(type_id = get_first(type_id)) %>% mutate(type = sapply(type_id, get_type)) %>% select(-type_id)
pokemon_id_types
type_counts <- group_by(pokemon_id_types) %>% summarise(count = length(pokemon_id)) %>% filter(type %in% types)
pokemon_id_types <- group_by(pokemon_types, pokemon_id) %>% summarise(type_id = get_first(type_id)) %>% mutate(type = sapply(type_id, get_type)) %>% select(-type_id)
type_counts <- group_by(pokemon_id_types) %>% summarise(count = length(pokemon_id)) %>% filter(type %in% types)
pokemon_id_types
type_counts <- group_by(pokemon_id_types, type) %>% summarise(count = length(pokemon_id)) %>% filter(type %in% types)
type_counts
stats_and_types <- left_join(pokemon_id_types,pokemon_stats)
head(stats_and_types)
head(pokemon_stats)
head(stat_names)
stats_and_types <- left_join(pokemon_id_types,pokemon_stats) %>% filter(stat_id %in% c(2,4)) %>% group_by(pokemon_id) %>% summarise(power = sum(base_stat), type = get_first(type))
stats_and_types
type_power <- group_by(stats_and_types, type) %>% summarise(power = sum(power))
type_power
result <- left_join(result, type_power)
result <- type_counts
result <- left_join(result, type_power)
result
result <- left_join(result, type_power) %>% summarise(avg_power = power / count)
result <- left_join(result, type_power) %>% mutate(avg_power = power / count)
result
result <- left_join(result, type_power) %>% mutate(avg_power = power / count) %>% summarise(type, avg_power)
result <- left_join(result, type_power) %>% mutate(avg_power = power / count) %>% select(type, avg_power)
result
result <- left_join(result, type_power) %>% mutate(avg_power = power / count)
result <- left_join(result, type_power) %>% mutate(avg_power = power / count)
result
result <- type_counts
result <- left_join(result, type_power) %>% mutate(avg_power = power / count)
result
result <- type_counts
type_power <- group_by(stats_and_types, type) %>% summarise(total_power = sum(power))
result <- left_join(result, type_power) %>% mutate(avg_power = power / count)
result
result <- type_counts
stats_and_types <- left_join(pokemon_id_types,pokemon_stats) %>% filter(stat_id %in% c(2,4)) %>% group_by(pokemon_id) %>% summarise(power = sum(base_stat), type = get_first(type))
type_power <- group_by(stats_and_types, type) %>% summarise(total_power = sum(power))
result <- left_join(result, type_power) %>% mutate(avg_power = power / count)
stats_and_types <- left_join(pokemon_id_types,pokemon_stats) %>% filter(stat_id %in% c(2,4)) %>% group_by(pokemon_id) %>% summarise(power = sum(base_stat), type = get_first(type))
type_power <- group_by(stats_and_types, type) %>% summarise(total_power = sum(power))
result <- left_join(result, type_power) %>% mutate(avg_power = total_power / count)
result
result <- type_counts
stats_and_types <- left_join(pokemon_id_types,pokemon_stats) %>% filter(stat_id %in% c(2,4)) %>% group_by(pokemon_id) %>% summarise(power = sum(base_stat), type = get_first(type))
type_power <- group_by(stats_and_types, type) %>% summarise(total_power = sum(power))
result <- left_join(result, type_power) %>% mutate(avg_power = floor(total_power / count))
result
result <- type_counts
stats_and_types <- left_join(pokemon_id_types,pokemon_stats) %>% filter(stat_id %in% c(2,4)) %>% group_by(pokemon_id) %>% summarise(power = sum(base_stat), type = get_first(type))
type_power <- group_by(stats_and_types, type) %>% summarise(total_power = sum(power))
result <- left_join(result, type_power) %>% mutate(avg_power = as.numeric(floor(total_power / count)))
result
result <- type_counts
stats_and_types <- left_join(pokemon_id_types,pokemon_stats) %>% filter(stat_id %in% c(2,4)) %>% group_by(pokemon_id) %>% summarise(power = sum(base_stat), type = get_first(type))
type_power <- group_by(stats_and_types, type) %>% summarise(total_power = sum(power))
result <- left_join(result, type_power) %>% mutate(avg_power = as.integer(floor(total_power / count)))
result
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(readr)
getwd()
pokemon <- read_csv("pokemon.csv")
pokemon
write.csv(x = result, file = "./clean_data/nflweather.csv", row.names = FALSE)
Store clean file as types_clean.csv
write.csv(x = result, file = "./clean_data/types_clean.csv", row.names = FALSE)
if (!dir.exists("./clean_data")) dir.create("./clean_data")
write.csv(x = result, file = "./clean_data/types_clean.csv", row.names = FALSE)
ggetwd()
getwd()
setwd("Users/alinxie/stat133/project")
setwd("~/Users/alinxie/stat133/project")
setwd("../../alinxie/stat133/project")
type_reference <- read_csv("~/rawdata/types.csv")
type_reference <- read_csv("/rawdata/types.csv")
type_reference <- read_csv("rawdata/types.csv")
getwd()
setwd()
setwd("/Users/alinxie/stat133/project")
getwd
getwd()
type_reference <- read_csv("rawdata/types.csv")
